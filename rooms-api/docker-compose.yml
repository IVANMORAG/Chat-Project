version: '3'
services:
  rooms-api-1:
    build: .
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - MONGODB_URI=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/rooms_service?replicaSet=rs_rooms
      - JWT_SECRET=tu_secreto_super_seguro
      - API_AUTH_URL=http://192.168.1.181:8001
      - API_CHAT_URL=http://192.168.1.181:8003
    restart: always
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  rooms-api-2:
    build: .
    ports:
      - "3012:3002"  # Mapea el puerto 3012 del host al 3002 del contenedor
    environment:
      - PORT=3002
      - MONGODB_URI=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/rooms_service?replicaSet=rs_rooms
      - JWT_SECRET=tu_secreto_super_seguro
      - API_AUTH_URL=http://192.168.1.181:8001
      - API_CHAT_URL=http://192.168.1.181:8003
    restart: always
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
  mongo1:
    image: mongo:latest
    ports:
      - "27018:27017"
    volumes:
      - mongo-data1:/data/db
    command: mongod --replSet rs_rooms --port 27017 --bind_ip 0.0.0.0
    restart: always
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  mongo2:
    image: mongo:latest
    ports:
      - "27028:27017"
    volumes:
      - mongo-data2:/data/db
    command: mongod --replSet rs_rooms --port 27017 --bind_ip 0.0.0.0
    restart: always
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  mongo3:
    image: mongo:latest
    ports:
      - "27038:27017"
    volumes:
      - mongo-data3:/data/db
    command: mongod --replSet rs_rooms --port 27017 --bind_ip 0.0.0.0
    restart: always
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Script para inicializar el replica set
  mongo-init:
    image: mongo:latest
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    restart: on-failure
    command: >
      bash -c "sleep 10 && mongosh --host mongo1:27017 --eval 'rs.initiate({
        _id: \"rs_rooms\",
        members: [
          {_id: 0, host: \"mongo1:27017\"},
          {_id: 1, host: \"mongo2:27017\"},
          {_id: 2, host: \"mongo3:27017\"}
        ]
      })'"

volumes:
  mongo-data1:
  mongo-data2:
  mongo-data3: